plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group
loader_version = project.loader_version

base {
	archivesName = project.archives_base_name
}

repositories {
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

fabricApi {
	configureDataGeneration {
		client = true
		setModId("${archives_base_name}")
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation("maven.modrinth:nemos-mossy-blocks:${nemos_mossy_blocks_version}-fabric")
	modImplementation("maven.modrinth:nemos-tags:${nemos_tags_version}-fabric")
	modImplementation("maven.modrinth:biomes-o-plenty:${biomes_o_plenty_version}-fabric")
	modImplementation("maven.modrinth:terrablender:${terrablender_version}-fabric")
	modImplementation("maven.modrinth:glitchcore:${glitchcore_version}-fabric")
	modImplementation("maven.modrinth:oh-the-biomes-weve-gone:${oh_the_biomes_weve_gone_version}")
	modImplementation("maven.modrinth:geckolib:${geckolib_version}-fabric")
	modImplementation("maven.modrinth:corgilib:${corgilib_version}")
	modImplementation("maven.modrinth:oh-the-trees-youll-grow:${oh_the_trees_youll_grow_version}")
	implementation("com.electronwill.night-config:toml:${night_config_version}")
	implementation("com.electronwill.night-config:core:${night_config_version}")
	implementation("net.jodah:typetools:${typetools_version}")
}

processResources {
	inputs.property "version", project.version
	inputs.property "loader_version", project.loader_version
	inputs.property "minecraft_version", project.minecraft_version

	filesMatching("fabric.mod.json") {
		expand(
				"version": inputs.properties.version,
				"loader_version" : inputs.properties.loader_version,
				"minecraft_version" : inputs.properties.minecraft_version
		)
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}